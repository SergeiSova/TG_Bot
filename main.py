import telebot
from telebot import types
import json

bot = telebot.TeleBot('# TG bot key')

adminID = 1 # adminID
adminID1 = 2 # adminID1

try:
    with open('data.json', 'r') as data_file:
        data = json.load(data_file)
except FileNotFoundError:
    data = {'joinedUsers': {}, 'usergames': {}}

max_players = 8


@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    user_first_name = message.from_user.first_name
    user_username = message.from_user.username

    if user_id not in data['joinedUsers']:
        data['joinedUsers'][user_id] = {"id": user_id, "first_name": user_first_name, "username": f"@{user_username}"}
        save_data()

        admin_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_first_name} (@{user_username}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É"
        bot.send_message(adminID, admin_message)
        bot.send_message(adminID1, admin_message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    item2 = types.KeyboardButton("üìù –ß–∞—Ç")
    markup.add(item1, item2)

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ä–∞–¥, —á—Ç–æ –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –∏–≥—Ä–æ–π "
                                      "TTM Board Game. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã –∏ "
                                      "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚¨á", parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['sendall'])
def send_all(message):
    if message.chat.id == adminID or adminID1:
        bot.send_message(message.chat.id, 'Start')
        for user_id, name in data['joinedUsers'].items():
            bot.send_message(user_id, message.text[message.text.find(' '):])
        bot.send_message(message.chat.id, 'Done')
    else:
        bot.send_message(message.chat.id, 'Error')


@bot.message_handler(content_types=['text'])
def games(message):
    if message.chat.type == 'private':
        if message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            markup = types.InlineKeyboardMarkup(row_width=1)
            item1 = types.InlineKeyboardButton("–ò–≥—Ä–∞ ‚Ññ1", callback_data='game 1')
            markup.add(item1)
            bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã', reply_markup=markup)
        elif message.text == 'üìù –ß–∞—Ç':
            markup = types.InlineKeyboardMarkup(row_width=1)
            item2 = types.InlineKeyboardButton("–ò–≥—Ä–∞ ‚Ññ1", callback_data='game 1')
            markup.add(item2)
            welcome_message = "–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à [—á–∞—Ç](# link to the chat) –∏ —É–∑–Ω–∞–≤–∞–π—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–≤—ã–º–∏"
            bot.send_message(message.chat.id, welcome_message, parse_mode='Markdown')


def save_data():
    with open('data.json', 'w') as dataFile:
        json.dump(data, dataFile, ensure_ascii=False, indent=4)


def get_participants(game_id):
    if game_id in data['usergames']:
        user_ids = data['usergames'][game_id]
        participants = []
        for user_id in user_ids:
            try:
                user = bot.get_chat_member(user_id, user_id)
                participants.append(f'{user.user.first_name} (@{user.user.username})')
            except Exception as e:
                print(f"Error getting user info: {e}")
        return '\n'.join(participants)
    return '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            chat_id = call.message.chat.id
            user_id = call.from_user.id
            game_id = call.data.split(' ')[1]
            if call.data == f'game {game_id}':
                usergames = data['usergames'].setdefault(game_id, [])
                current_players = len(usergames)
                available_slots = max_players - current_players
                markup = types.InlineKeyboardMarkup(row_width=1)
                if user_id in usergames:
                    item1 = types.InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f'leave {game_id}')
                elif available_slots > 0:
                    item1 = types.InlineKeyboardButton(f"‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è ({available_slots} –º–µ—Å—Ç)",
                                                       callback_data=f'join {game_id}')
                else:
                    item1 = types.InlineKeyboardButton(f"‚ùå –ó–∞–ø–∏—Å–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data='No')
                markup.add(item1)
                bot.send_message(chat_id, "<b>–ò–≥—Ä–∞:</b> TTM Board Game"
                                          f"\n<b>–î–∞—Ç–∞:</b> 02.03.2024 19:00"
                                          f"\n<b>–õ–æ–∫–∞—Ü–∏—è:</b> <a href='# location"
                                          f"/'>–ö–∞—Ñ–µ –ù—å—é –ô–æ—Ä–∫</a>"
                                          f"\n<b>–¶–µ–Ω–∞:</b> 1500 —Ä—É–±."
                                          f"\n<b>–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:</b> {available_slots} –∏–∑ {max_players}"
                                          "\n"
                                          "\n"
                                          "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
                                          f"{get_participants(game_id)}", parse_mode='html',
                                 reply_markup=markup)
    except Exception as e:
        print(repr(e))

    try:
        if call.message:
            chat_id = call.message.chat.id
            user_id = call.from_user.id

            game_id = call.data.split(' ')[1]

            if call.data.startswith(f'join {game_id}'):
                if game_id in data['usergames']:
                    usergames = data['usergames'][game_id]
                    if user_id not in usergames and len(usergames) < max_players:
                        usergames.append(user_id)
                        bot.send_message(chat_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∏–≥—Ä—É {game_id}')

                        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
                        admin_message = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} (@{call.from_user.username}) "
                                         f"–∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∏–≥—Ä—É {game_id}")
                        bot.send_message(adminID, admin_message)
                        bot.send_message(adminID1, admin_message)
                        save_data()

            elif call.data.startswith(f'leave {game_id}'):
                if game_id in data['usergames']:
                    usergames = data['usergames'][game_id]
                    if user_id in usergames:
                        usergames.remove(user_id)
                        bot.send_message(chat_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∏–≥—Ä—ã {game_id}')

                        admin_message = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} (@{call.from_user.username}) "
                                         f"–æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∏–≥—Ä—ã {game_id}.")
                        bot.send_message(adminID, admin_message)
                        bot.send_message(adminID1, admin_message)
                        save_data()

    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
